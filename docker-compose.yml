version: '3.8'

services:
  # --- SERVIÇO DO BACKEND (API) ---
  api:
    image: newnet/backend-api
    build:
      context: ./backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    ports:
      # Expõe a porta 8000 do contêiner para a porta 8000 do localhost do host
      - "127.0.0.1:8000:8000"
    secrets:
      - db_user
      - db_password
    environment:
      - POSTGRES_USER_FILE=/run/secrets/db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_SERVER=db
      - POSTGRES_DB=${DB_LOCAL_NAME}
    networks:
      - app-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  # --- SERVIÇO DO BANCO DE DADOS ---
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    secrets:
      - db_user
      - db_password
    environment:
      - POSTGRES_USER_FILE=/run/secrets/db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB=${DB_LOCAL_NAME}
    networks:
      - app-network
    deploy:
      placement:
        constraints: [node.role == manager]

  # --- SERVIÇO DO FRONTEND FORMULÁRIO (NEXT.JS) ---
  form:
    image: newnet/frontend-form
    build:
      context: ./frontend/frontend-formulario
    ports:
      # Expõe a porta 3000 do contêiner para a porta 3000 do localhost do host
      - "127.0.0.1:3000:3000"
    networks:
      - app-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  # --- SERVIÇO DO FRONTEND ADMIN (VITE) ---
  admin:
    image: newnet/frontend-admin
    build:
      context: ./frontend/newnet-admin
    ports:
      # Expõe a porta 80 do contêiner para a porta 8080 do localhost do host
      - "127.0.0.1:8080:80"
    networks:
      - app-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

volumes:
  postgres_data:

networks:
  app-network:
    driver: overlay

secrets:
  db_user:
    external: true
  db_password:
    external: true